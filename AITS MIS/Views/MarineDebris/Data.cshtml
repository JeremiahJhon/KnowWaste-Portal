@{
    Layout = "~/Views/MarineDebris/Shared.cshtml";
}
@using System.Data;

@{
    DataTable countries = (DataTable)ViewBag.Country;
}
<div class="row mt-20">
    <div class="landing-dark-bg h-250px">
        <div class="container py-lg-20">
            <!--begin::Title-->
            <!--begin::Title-->
            <h1 class="text-white lh-base fw-bolder fs-2x fs-lg-3x">
                <span class="text-gray-800">MARINE DEBRIS</span>
                @*<span style="background: linear-gradient(to right, #12CE5D 0%, #FFD80C 100%);-webkit-background-clip: text;-webkit-text-fill-color: transparent;">
                    </span>*@
            </h1>
            <!--end::Title-->
        </div>
    </div>
</div>

<div class="row mt-lg-n20">
    <div class="row d-flex flex-column flex-center w-100 min-h-350px min-h-lg-500px">
        <div class="row w-100 mb-md-10">
            <div class="col-md-6 px-2">
                <div class="w-100 h-100 d-flex flex-column bg-body py-15 px-10" style="filter: drop-shadow(0px 0px 5px rgba(68, 81, 96, 0.1))">
                    <div class="col-md-12 mb-7 text-center">
                        <!--begin::Title-->
                        <h1 class="text-dark mb-5 fw-boldest">Solid Waste</h1>
                        <!--end::Title-->
                        <!--begin::Description-->
                        <div class="text-gray-400 fw-bold mb-5 d-none">Short description here</div>
                        <div class="d-flex flex-center mb-10">
                            <button id="kt_drawer_filter_1_button" class="btn btn-primary py-2 px-4">
                                <span class="svg-icon svg-icon-5 svg-icon-gray-500 me-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <path d="M19.0759 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z" fill="black"></path>
                                    </svg>
                                </span>Filter
                            </button>
                        </div>
                        <div class="d-flex px-5">
                            <label class="px-2 py-1">Country: </label>
                            <div id="solid-country-filter-list">

                            </div>
                        </div>
                        <div id="chart-1" style="height: 350px;"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 px-2">
                <div class="w-100 h-100 d-flex flex-column bg-body py-15 px-10" style="filter: drop-shadow(0px 0px 5px rgba(68, 81, 96, 0.1))">
                    <div class="col-md-12 mb-7 text-center">
                        <!--begin::Title-->
                        <h1 class="text-dark mb-5 fw-boldest">Plastic Waste</h1>
                        <!--end::Title-->
                        <!--begin::Description-->
                        <div class="text-gray-400 fw-bold mb-5 d-none">Short description here</div>
                        <div class="d-flex flex-center mb-10">
                            <button id="kt_drawer_filter_2_button" class="btn btn-primary py-2 px-4">
                                <span class="svg-icon svg-icon-5 svg-icon-gray-500 me-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <path d="M19.0759 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z" fill="black"></path>
                                    </svg>
                                </span>Filter
                            </button>
                        </div>
                        <div class="d-flex px-5">
                            <label class="px-2 py-1">Country: </label>
                            <div id="plastic-country-filter-list">

                            </div>
                        </div>
                        <div id="chart-2" style="height: 350px;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="kt_drawer_filter_1_basic" class="bg-white drawer drawer-end" data-kt-drawer="true" data-kt-drawer-activate="true" data-kt-drawer-toggle="#kt_drawer_filter_1_button" data-kt-drawer-close="#kt_drawer_filter_1_close" data-kt-drawer-width="250px">
    <!--begin::Card-->
    <div class="card w-100 rounded-0">
        <!--begin::Card header-->
        <div class="card-header pe-5">
            <!--begin::Title-->
            <div class="card-title">
                <!--begin::User-->
                <div class="d-flex justify-content-center flex-column me-3">
                    <a href="#" class="fs-4 fw-bolder text-gray-900 text-hover-primary me-1 lh-1">Filter Data</a>
                </div>
                <!--end::User-->
            </div>
            <!--end::Title-->
            <!--begin::Card toolbar-->
            <div class="card-toolbar">
                <!--begin::Close-->
                <div class="btn btn-sm btn-icon btn-active-light-primary" id="kt_drawer_filter_1_close">
                    <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                    <span class="svg-icon svg-icon-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black"></rect>
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black"></rect>
                        </svg>
                    </span>
                    <!--end::Svg Icon-->
                </div>
                <!--end::Close-->
            </div>
            <!--end::Card toolbar-->
        </div>
        <!--end::Card header-->
        <!--begin::Card body-->
        <div class="card-body hover-scroll-overlay-y pt-2">
            <form id="form-filter-1">
                <div class="m-5 mb-10" ">
                    <h3 class="mb-3">Country</h3>
                    <div class="w-100">
                        <div class="form-check form-switch form-check-custom form-check-solid m-2 mb-5">
                            <input class="form-check-input h-20px w-30px" name="solid-country-all" type="checkbox" value="All" id="solid-country-all" checked="checked" />
                            <label class="form-check-label" for="solid-country-all">
                                All
                            </label>
                        </div>
                        @foreach (DataRow row in countries.Rows)
                        {
                            <div class="form-check form-switch form-check-custom form-check-solid m-2">
                                <input class="form-check-input h-20px w-30px solid-country-filter" name="country" type="checkbox" value="@row["ID"].ToString()" id="country-@row["ID"].ToString()" checked="checked" data-text="@row["Name"].ToString()" />
                                <label class="form-check-label" for="country-@row["ID"].ToString()">
                                    @row["Name"].ToString()
                                </label>
                            </div>
                        }
                    </div>
                </div>
                <div class="m-5 mb-10">
                    <h3 class="mb-3">Type</h3>
                    <div class="w-100">
                        <div class="form-check form-switch form-check-custom form-check-solid m-2 mb-5">
                            <input class="form-check-input h-20px w-30px" name="solid-type-all" type="checkbox" value="All" id="solid-type-all" checked="checked" />
                            <label class="form-check-label" for="solid-type-all">
                                All
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px solid-type-filter" name="type" type="checkbox" value="Generated" id="type-generated" checked="checked">
                            <label class="form-check-label" for="type-generated">
                                Generated
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px solid-type-filter" name="type" type="checkbox" value="Collected" id="type-collected" checked="checked">
                            <label class="form-check-label" for="type-collected">
                                Collected
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px solid-type-filter" name="type" type="checkbox" value="Recycled" id="type-recycled" checked="checked">
                            <label class="form-check-label" for="type-recycled">
                                Recycled
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px solid-type-filter" name="type" type="checkbox" value="Recovered" id="type-recovered" checked="checked">
                            <label class="form-check-label" for="type-recovered">
                                Recovered
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px solid-type-filter" name="type" type="checkbox" value="Disposal" id="type-disposal" checked="checked">
                            <label class="form-check-label" for="type-disposal">
                                Disposal
                            </label>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <!--end::Card body-->
        <div class="card-footer pe-5">
            <button type="button" class="btn btn-success" id="button-filter-apply-1">Apply</button>
        </div>
    </div>
    <!--end::Card-->
</div>

<div id="kt_drawer_filter_2_basic" class="bg-white drawer drawer-end" data-kt-drawer="true" data-kt-drawer-activate="true" data-kt-drawer-toggle="#kt_drawer_filter_2_button" data-kt-drawer-close="#kt_drawer_filter_2_close" data-kt-drawer-width="250px">
    <!--begin::Card-->
    <div class="card w-100 rounded-0">
        <!--begin::Card header-->
        <div class="card-header pe-5">
            <!--begin::Title-->
            <div class="card-title">
                <!--begin::User-->
                <div class="d-flex justify-content-center flex-column me-3">
                    <a href="#" class="fs-4 fw-bolder text-gray-900 text-hover-primary me-1 lh-1">Filter Data</a>
                </div>
                <!--end::User-->
            </div>
            <!--end::Title-->
            <!--begin::Card toolbar-->
            <div class="card-toolbar">
                <!--begin::Close-->
                <div class="btn btn-sm btn-icon btn-active-light-primary" id="kt_drawer_filter_2_close">
                    <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                    <span class="svg-icon svg-icon-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <rect opacity="0.5" x="6" y="17.3137" width="16" height="2" rx="1" transform="rotate(-45 6 17.3137)" fill="black"></rect>
                            <rect x="7.41422" y="6" width="16" height="2" rx="1" transform="rotate(45 7.41422 6)" fill="black"></rect>
                        </svg>
                    </span>
                    <!--end::Svg Icon-->
                </div>
                <!--end::Close-->
            </div>
            <!--end::Card toolbar-->
        </div>
        <!--end::Card header-->
        <!--begin::Card body-->
        <div class="card-body hover-scroll-overlay-y pt-2">
            <form id="form-filter-2">
                <div class="m-5 mb-10" ">
                    <h3 class="mb-3">Country</h3>
                    <div class="w-100">
                        <div class="form-check form-switch form-check-custom form-check-solid m-2 mb-5">
                            <input class="form-check-input h-20px w-30px" name="plastic-country-all" type="checkbox" value="All" id="plastic-country-all" checked="checked" />
                            <label class="form-check-label" for="plastic-country-all">
                                All
                            </label>
                        </div>
                        @foreach (DataRow row in countries.Rows)
                        {
                            <div class="form-check form-switch form-check-custom form-check-solid m-2">
                                <input class="form-check-input h-20px w-30px plastic-country-filter" name="country" type="checkbox" value="@row["ID"].ToString()" id="country-@row["ID"].ToString()" checked="checked" data-text="@row["Name"].ToString()" />
                                <label class="form-check-label" for="country-@row["ID"].ToString()">
                                    @row["Name"].ToString()
                                </label>
                            </div>
                        }
                    </div>
                </div>
                <div class="m-5 mb-10">
                    <h3 class="mb-3">Type</h3>
                    <div class="w-100">
                        <div class="form-check form-switch form-check-custom form-check-solid m-2 mb-5">
                            <input class="form-check-input h-20px w-30px" name="plastic-type-all" type="checkbox" value="All" id="plastic-type-all" checked="checked" />
                            <label class="form-check-label" for="plastic-type-all">
                                All
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px plastic-type-filter" name="type" type="checkbox" value="Generated" id="type-generated" checked="checked">
                            <label class="form-check-label" for="type-generated">
                                Generated
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px plastic-type-filter" name="type" type="checkbox" value="Collected" id="type-collected" checked="checked">
                            <label class="form-check-label" for="type-collected">
                                Collected
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px plastic-type-filter" name="type" type="checkbox" value="Recycled" id="type-recycled" checked="checked">
                            <label class="form-check-label" for="type-recycled">
                                Recycled
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px plastic-type-filter" name="type" type="checkbox" value="Recovered" id="type-recovered" checked="checked">
                            <label class="form-check-label" for="type-recovered">
                                Recovered
                            </label>
                        </div>
                        <div class="form-check form-switch form-check-custom form-check-solid m-2">
                            <input class="form-check-input h-20px w-30px plastic-type-filter" name="type" type="checkbox" value="Disposal" id="type-disposal" checked="checked">
                            <label class="form-check-label" for="type-disposal">
                                Disposal
                            </label>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <!--end::Card body-->
        <div class="card-footer pe-5">
            <button type="button" class="btn btn-success" id="button-filter-apply-2">Apply</button>
        </div>
    </div>
    <!--end::Card-->
</div>

<script src="\Scripts\jquery-3.6.4.min.js"></script>
<script>
    var chart1;
    var chart2;
    $(document).ready(function () {
        createSolidWasteGraph();
        createPlasticWasteGraph();
        $("#button-filter-apply-1").click(function () {
            chart1.destroy();
            createSolidWasteGraph();
            $("#kt_drawer_filter_1_close").click();
        });
        $("#button-filter-apply-2").click(function () {
            chart2.destroy();
            createPlasticWasteGraph();
            $("#kt_drawer_filter_2_close").click();
        });
        function createSolidWasteGraph(id, x_axis, series) {
            $.ajax({
                url: '/MarineDebris/getSolidWasteGraphData',
                data: $("#form-filter-1").serialize(),
                type: 'POST',
                processData: false,
                success: function (data) {
                    var graphData = JSON.parse(data);
                    var x_axis = [];
                    var series = [];
                    var data_ = [];
                    var count = 0;
                    if (graphData.length > 0) {
                        if (graphData[0].hasOwnProperty("Generated")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Generated"];
                            }
                            series[count] = {
                                name: "Generated",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Collected")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Collected"];
                            }
                            series[count] = {
                                name: "Collected",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Recycled")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Recycled"];
                            }
                            series[count] = {
                                name: "Recycled",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Recovered")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Recovered"];
                            }
                            series[count] = {
                                name: "Recovered",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Disposal")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Disposal"];
                            }
                            series[count] = {
                                name: "Disposal",
                                data: data_
                            }
                            count++;
                        }

                        var options = {
                            series: series,
                            chart: {
                                type: 'bar',
                                stacked: true,
                                height: 400,
                                toolbar: {
                                    show: true
                                },
                                zoom: {
                                    enabled: true
                                }
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: false,
                                    endingShape: 'rounded',
                                    borderRadius: 2
                                },
                            },
                            dataLabels: {
                                enabled: false
                            },
                            stroke: {
                                show: true,
                                width: 2,
                                colors: ['transparent']
                            },
                            xaxis: {
                                categories: x_axis,
                                labels: {
                                    show: true,
                                    minWidth: 0,
                                    maxWidth: 160,
                                    style: {
                                        fontSize: '12px',
                                        fontFamily: 'Roboto Condensed, sans-serif',
                                        fontWeight: 400,
                                    }
                                },
                                title: {
                                    text: 'Year'
                                }
                            },
                            yaxis: {
                                labels: {
                                    show: true,
                                    align: 'right',
                                    minWidth: 0,
                                    maxWidth: 160,
                                    style: {
                                        fontSize: '12px',
                                        fontFamily: 'Roboto Condensed, sans-serif',
                                        fontWeight: 400,
                                    },
                                    offsetX: 0,
                                    offsetY: 0,
                                    rotate: 0,
                                    formatter: function (val) {
                                        return numFormatter(val);//.toLocaleString('en-US')
                                    }
                                },
                                title: {
                                    text: 'Tons'
                                }
                            },
                            fill: {
                                opacity: 1
                            },
                            tooltip: {
                                enabled: true,
                                y: {
                                    formatter: function (val) {
                                        return val.toLocaleString('en-US') + " Tons";
                                    }
                                }
                            },
                            noData: {
                                text: 'No Data'
                            },
                            legend: {
                                position: 'right',
                                offsetY: 40
                            },
                        };

                        chart1 = new ApexCharts(document.querySelector("#chart-1"), options);
                        chart1.render();
                    } else {
                        var options = {
                            chart: {
                                height: 350,
                                type: 'bar',
                            },
                            dataLabels: {
                                enabled: false
                            },
                            series: [],
                            noData: {
                                text: 'No Data'
                            }
                        }

                        chart1 = new ApexCharts(document.querySelector("#chart-1"), options);
                        chart1.render();
                    }
                },
                error: function (err) {
                    console.log(err);
                },
            });
            var country = $('#form-filter-1 [name="country"]');
            $("#solid-country-filter-list").html('');
            for (var ctr = 0; ctr < country.length; ctr++) {
                var countryElem = '<span class="badge badge-light-dark m-1">' + $(country[ctr]).data("text") + '</span>';
                if (country[ctr].checked) {
                    $("#solid-country-filter-list").append(countryElem);
                }
            }
        }
        function createPlasticWasteGraph(id, x_axis, series) {
            $.ajax({
                url: '/MarineDebris/getPlasticWasteGraphData',
                data: $("#form-filter-2").serialize(),
                type: 'POST',
                processData: false,
                success: function (data) {
                    var graphData = JSON.parse(data);
                    var x_axis = [];
                    var series = [];
                    var data_ = [];
                    var count = 0;
                    if (graphData.length > 0) {
                        if (graphData[0].hasOwnProperty("Generated")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Generated"];
                            }
                            series[count] = {
                                name: "Generated",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Collected")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Collected"];
                            }
                            series[count] = {
                                name: "Collected",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Recycled")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Recycled"];
                            }
                            series[count] = {
                                name: "Recycled",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Recovered")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Recovered"];
                            }
                            series[count] = {
                                name: "Recovered",
                                data: data_
                            }
                            count++;
                        }
                        data_ = [];
                        if (graphData[0].hasOwnProperty("Disposal")) {
                            for (var ctr = 0; ctr < graphData.length; ctr++) {
                                x_axis[ctr] = graphData[ctr]["Year"];
                                data_[ctr] = graphData[ctr]["Disposal"];
                            }
                            series[count] = {
                                name: "Disposal",
                                data: data_
                            }
                            count++;
                        }

                        var options = {
                            series: series,
                            chart: {
                                type: 'bar',
                                stacked: true,
                                height: 400,
                                toolbar: {
                                    show: true
                                },
                                zoom: {
                                    enabled: true
                                }
                            },
                            plotOptions: {
                                bar: {
                                    horizontal: false,
                                    endingShape: 'rounded',
                                    borderRadius: 2
                                },
                            },
                            dataLabels: {
                                enabled: false
                            },
                            stroke: {
                                show: true,
                                width: 2,
                                colors: ['transparent']
                            },
                            xaxis: {
                                categories: x_axis,
                                labels: {
                                    show: true,
                                    minWidth: 0,
                                    maxWidth: 160,
                                    style: {
                                        fontSize: '12px',
                                        fontFamily: 'Roboto Condensed, sans-serif',
                                        fontWeight: 400,
                                    }
                                },
                                title: {
                                    text: 'Year'
                                }
                            },
                            yaxis: {
                                labels: {
                                    show: true,
                                    align: 'right',
                                    minWidth: 0,
                                    maxWidth: 160,
                                    style: {
                                        fontSize: '12px',
                                        fontFamily: 'Roboto Condensed, sans-serif',
                                        fontWeight: 400,
                                    },
                                    offsetX: 0,
                                    offsetY: 0,
                                    rotate: 0,
                                    formatter: function (val) {
                                        return numFormatter(val);//.toLocaleString('en-US')
                                    }
                                },
                                title: {
                                    text: 'Tons'
                                }
                            },
                            fill: {
                                opacity: 1
                            },
                            tooltip: {
                                enabled: true,
                                y: {
                                    formatter: function (val) {
                                        return val.toLocaleString('en-US') + " Tons";
                                    }
                                }
                            },
                            noData: {
                                text: 'No Data'
                            },
                            legend: {
                                position: 'right',
                                offsetY: 40
                            },
                        };

                        chart2 = new ApexCharts(document.querySelector("#chart-2"), options);
                        chart2.render();
                    } else {
                        var options = {
                            chart: {
                                height: 350,
                                type: 'bar',
                            },
                            dataLabels: {
                                enabled: false
                            },
                            series: [],
                            noData: {
                                text: 'No Data'
                            }
                        }

                        chart2 = new ApexCharts(document.querySelector("#chart-2"), options);
                        chart2.render();
                    }
                },
                error: function (err) {
                    console.log(err);
                },
            })
            var country = $('#form-filter-2 [name="country"]');
            $("#plastic-country-filter-list").html('');
            for (var ctr = 0; ctr < country.length; ctr++) {
                var countryElem = '<span class="badge badge-light-dark m-1">' + $(country[ctr]).data("text") + '</span>';
                if (country[ctr].checked) {
                    $("#plastic-country-filter-list").append(countryElem);
                }
            }
        }
        $("#solid-country-all").change(function () {
            if (this.checked) {
                var clist = document.getElementsByClassName("solid-country-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = true; }
            } else {
                var clist = document.getElementsByClassName("solid-country-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = false; }
            }
            getDocumentData();
        });
        $("#solid-type-all").change(function () {
            if (this.checked) {
                var clist = document.getElementsByClassName("solid-type-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = true; }
            } else {
                var clist = document.getElementsByClassName("solid-type-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = false; }
            }
        });
        $("#plastic-country-all").change(function () {
            if (this.checked) {
                var clist = document.getElementsByClassName("plastic-country-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = true; }
            } else {
                var clist = document.getElementsByClassName("plastic-country-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = false; }
            }
            getDocumentData();
        });
        $("#plastic-type-all").change(function () {
            if (this.checked) {
                var clist = document.getElementsByClassName("plastic-type-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = true; }
            } else {
                var clist = document.getElementsByClassName("plastic-type-filter");
                for (var i = 0; i < clist.length; ++i) { clist[i].checked = false; }
            }
        });
        function numFormatter(num) {
            if (num >= 1000000000) {
                return Math.abs(num) > 999999999 ? Math.sign(num) * ((Math.abs(num) / 1000000000).toFixed(1)) + ' B' : Math.sign(num) * Math.abs(num)
            }
            if (num >= 1000000) {
                return Math.abs(num) > 999999 ? Math.sign(num) * ((Math.abs(num) / 1000000).toFixed(1)) + ' M' : Math.sign(num) * Math.abs(num)
            }
            if (num >= 1000) {
                return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + ' K' : Math.sign(num) * Math.abs(num)
            }
        }
    });
</script>